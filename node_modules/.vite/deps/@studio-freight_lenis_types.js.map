{
  "version": 3,
  "sources": ["../../@studio-freight/lenis/dist/types/index.d.ts"],
  "sourcesContent": ["type EasingFunction = (t: number) => number;\ntype Orientation = 'vertical' | 'horizontal';\ntype GestureOrientation = 'vertical' | 'horizontal' | 'both';\nexport type LenisOptions = {\n    wrapper?: Window | HTMLElement;\n    content?: HTMLElement;\n    wheelEventsTarget?: Window | HTMLElement;\n    eventsTarget?: Window | HTMLElement;\n    smoothWheel?: boolean;\n    syncTouch?: boolean;\n    syncTouchLerp?: number;\n    touchInertiaMultiplier?: number;\n    duration?: number;\n    easing?: EasingFunction;\n    lerp?: number;\n    infinite?: boolean;\n    orientation?: Orientation;\n    gestureOrientation?: GestureOrientation;\n    touchMultiplier?: number;\n    wheelMultiplier?: number;\n    autoResize?: boolean;\n    __experimental__naiveDimensions?: boolean;\n};\nexport default class Lenis {\n    __isSmooth: boolean;\n    __isScrolling: boolean;\n    __isStopped: boolean;\n    __isLocked: boolean;\n    constructor({ wrapper, content, wheelEventsTarget, eventsTarget, smoothWheel, syncTouch, syncTouchLerp, touchInertiaMultiplier, duration, easing, lerp, infinite, orientation, gestureOrientation, touchMultiplier, wheelMultiplier, autoResize, __experimental__naiveDimensions, }?: LenisOptions);\n    destroy(): void;\n    on(event: string, callback: Function): any;\n    off(event: string, callback: Function): any;\n    private setScroll;\n    private onVirtualScroll;\n    resize(): void;\n    private emit;\n    private onNativeScroll;\n    private reset;\n    start(): void;\n    stop(): void;\n    raf(time: number): void;\n    scrollTo(target: number | string | HTMLElement, { offset, immediate, lock, duration, easing, lerp, onComplete, force, programmatic, }?: {\n        offset?: number;\n        immediate?: boolean;\n        lock?: boolean;\n        duration?: number;\n        easing?: EasingFunction;\n        lerp?: number;\n        onComplete?: (lenis: Lenis) => void;\n        force?: boolean;\n        programmatic?: boolean;\n    }): void;\n    get rootElement(): any;\n    get limit(): any;\n    get isHorizontal(): boolean;\n    get actualScroll(): any;\n    get scroll(): any;\n    get progress(): number;\n    get isSmooth(): boolean;\n    private set isSmooth(value);\n    get isScrolling(): boolean;\n    private set isScrolling(value);\n    get isStopped(): boolean;\n    private set isStopped(value);\n    get isLocked(): boolean;\n    private set isLocked(value);\n    get className(): string;\n    private toggleClassName;\n}\nexport {};\n"],
  "mappings": ";;;;;AAuBA,IAAqB,QAArB,MAA2B;AAAA,EAA3B;AACI;AACA;AACA;AACA;AAKA,wBAAQ;AACR,wBAAQ;AAER,wBAAQ;AACR,wBAAQ;AACR,wBAAQ;AA8BR,wBAAQ;AAAA;AACZ;",
  "names": []
}
